//@version=5
indicator("24-hour Volume", "24H Vol", format=format.volume)

priceTooltip = "If the symbol's volume is expressed in base units, it is multiplied by this value to convert it into a price."
price = input.source(close, "Price Source", tooltip = priceTooltip)
currencyInput = input.string(title = "Target Currency", defval="Default", options=["Default", "USD", "EUR", "CAD", "JPY", "GBP", "HKD", "CNY", "NZD", "RUB"])
currency = currencyInput == "Default" ? "" : currencyInput

msIn24h = 24 * 60 * 60 * 1000

maxBufferSize = switch
    timeframe.isminutes or timeframe.isseconds => 24 * 60
    timeframe.isdaily => 24 * 60 / 5
    => 24
    
cumVolTF = switch
    timeframe.isminutes or timeframe.isseconds => "1"
    timeframe.isdaily => "5"
    => "60"

cum24hVol(s) =>
    src = s
    
    if bar_index == 0
        // Creating a buffer of 'maxBufferSize+1' for 'src' and 'time' to avoid the 'max_bars_back' error
        src := src[maxBufferSize+1] * time[maxBufferSize+1] * 0
        
    var cumSum = 0.
    var int firstBarTimeIndex = na
    
    if na(firstBarTimeIndex) // 24H have not elapsed yet
        sum = 0.
        for i = 0 to maxBufferSize
            if (time - time[i]) >= msIn24h
                firstBarTimeIndex := bar_index - i + 1
                break
            sum += src[i]
        cumSum := sum
    else
        cumSum += nz(src)
        for i = firstBarTimeIndex to bar_index
            if (time - time[bar_index - i]) < msIn24h
                firstBarTimeIndex := i
                break
            cumSum -= nz(src[bar_index - i])
    cumSum

noVolumeError = "The data vendor doesn't provide volume data for this symbol."
if syminfo.volumetype == "tick" and syminfo.type == "crypto"
    runtime.error(noVolumeError)
var cumVol = 0.
cumVol += nz(volume)
if barstate.islast and cumVol == 0
    runtime.error(noVolumeError)
    
expr = syminfo.volumetype == "quote" ? volume : price * volume
vol24h = request.security(syminfo.tickerid, cumVolTF, cum24hVol(expr), currency = currency)
plot(vol24h, title = "24H Volume", style = plot.style_columns)
